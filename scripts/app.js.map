{"version":3,"file":"public/scripts/app.js","sources":["app/scripts/main.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;CACI;EACA,CADA,GACA;CADA,CAEA,SAAmB;CAFnB,CAIA,CAAO,EAAP,EAAO,EAAC;CACA,EAAD,CAAY,CAAJ,MAAX;CALJ,EAIO;CAJP,CAOA,CAAM,CAAN,IAAM,CAAC;CACH;OAAO;CAAP,CACe,CAAF,CAAb,CAAa,CAGuB,GAHvB,CAAb,EAAa;CADb,CAOa,CAAV,CAAH,MAAW;CAPX,CAUY,CAAT,CAAH,CAAU;CAVV,CAemB,CADH,CAAhB,EAAgB,EAGE,CAHF,IAAhB;CAdA,CAoBmB,CACA,CAFnB,SAAa;CAEgB,EAAD,EAAH;CAFzB,CAGe,CAHf,EAEmB,CAFnB,GAKe;CAAM,SAAW,GAAZ;CALpB,IAKc;CAxBd,CA0B0B,CAAnB,CAAP,GAAqC,CAAtB,CAAkC;CAAQ,IAAK,QAAL;CAAlD,IAAyC;CAC5C,CAEe,CAFhB,CAAH;CAnCJ,EAOM;CARV;;AA0CA,CA1CA,CA0Ce,CAAR,CAAP,CAAO,IAAC;CACJ,MAAO;CACH,CAAa,CAAd,CAAH;CAFG;;AAKP,CA/CA,CAgDa,EADb;A","sourcesContent":["map =\n    width: 960\n    height: 580\n    scheme: colorbrewer.YlOrRd[9]\n\n    color: (country)->\n        map.scheme[Math.floor(Math.random() * map.scheme.length)]\n\n    draw: (selector, geo)->\n        console.log geo\n        projection = d3.geo.naturalEarth()\n            .scale(map.width / 5)\n            # hide most of Antarctica and move a little to the left\n            .translate([(map.width / 2.2), (map.height / 1.7)])\n            .precision(.1)\n\n        map.path = d3.geo.path()\n            .projection(projection);\n\n        map.svg = d3.select(selector).append('svg')\n            .attr('width', map.width)\n            .attr('height', map.height)\n\n        svg_countries = map.svg.append('g')\n            .attr('class', 'countries')\n            .selectAll('path')\n            .data(topojson.feature(geo, geo.objects.subunits).features)\n\n        svg_countries.enter().append('path')\n            .attr('class', 'country')\n            .style('fill', (d)-> map.color d)\n            .attr('d', map.path)\n            .append('title')\n                .text((d)-> d.properties.name)\n\n        mesh = topojson.mesh(geo, geo.objects.subunits, (a, b)-> a != b)\n        map.svg.insert('path')\n            .datum(mesh)\n            .attr('class', 'boundary')\n            .attr('d', map.path)\n\n\ninit = (error, geo) ->\n    console.log geo\n    map.draw '#map', geo\n\n\nqueue()\n    .defer(d3.json, '/geo/countries.topo.json')\n    .await(init)"]}